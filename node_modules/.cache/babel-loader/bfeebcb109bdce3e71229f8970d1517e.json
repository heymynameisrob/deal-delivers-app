{"ast":null,"code":"import valoo from 'valoo';\nimport Fuse from 'fuse.js';\nimport React, { useState, useEffect, Fragment, useCallback } from 'react';\nimport { __assign } from 'tslib';\nimport debounce from 'debounce';\nvar EventType;\n\n(function (EventType) {\n  EventType[EventType[\"Initial\"] = 0] = \"Initial\";\n  EventType[EventType[\"Input\"] = 1] = \"Input\";\n  EventType[EventType[\"External\"] = 2] = \"External\";\n})(EventType || (EventType = {}));\n\nfunction behaviorStore(initialValue) {\n  var store = valoo(initialValue);\n  var currentState = initialValue;\n\n  var emit = function (value) {\n    currentState = value;\n    store(value);\n  };\n\n  emit.on = function (fn) {\n    fn(currentState);\n    return store.on(fn);\n  };\n\n  return emit;\n}\n\nfunction filterResultsFactory(store) {\n  var Results = function (props) {\n    var _a = useState(\"\"),\n        searchVal = _a[0],\n        setSearch = _a[1];\n\n    useEffect(function () {\n      var unsubscribe = store.on(function (_a) {\n        var v = _a.v;\n        setSearch(v);\n      });\n      return unsubscribe;\n    }, []);\n\n    var prefilterItems = function (s) {\n      var items = props.items;\n      (props.prefilters || []).forEach(function (_a) {\n        var regex = _a.regex,\n            handler = _a.handler;\n        var matches = s.match(regex) || [];\n        s = s.replace(regex, \"\").trim();\n        matches.forEach(function (match) {\n          items = handler(match, items, Fuse);\n        });\n      });\n      return {\n        items: items,\n        search: s\n      };\n    };\n\n    var filterItems = function (s) {\n      var _a = prefilterItems(s || \"\"),\n          items = _a.items,\n          search = _a.search;\n\n      if (search.trim() === \"\") {\n        return props.defaultAllItems ? items : [];\n      } else {\n        var fuse = new Fuse(items, props.fuseConfig);\n        return fuse.search(search);\n      }\n    };\n\n    var filteredItems = filterItems(searchVal);\n    return React.createElement(Fragment, null, props.children(filteredItems));\n  };\n\n  Results.displayName = \"FilterResults\";\n  Results.defaultProps = {\n    defaultAllItems: true,\n    prefilters: []\n  };\n  return Results;\n}\n\nvar defaultProps = {\n  classPrefix: \"react-fuzzy-filter\",\n  debounceTime: 0,\n  inputProps: {},\n  onChange: function (value) {\n    return value;\n  }\n};\n\nfunction inputFilterFactory(store) {\n  function updateValue(value, onChange) {\n    var overrideValue = onChange(value);\n    store({\n      t: EventType.Input,\n      v: overrideValue\n    });\n  }\n\n  var Input = function (props) {\n    var initialSearch = props.initialSearch || \"\";\n    var onChange = props.onChange || defaultProps.onChange;\n    var debounceTime = props.debounceTime || defaultProps.debounceTime;\n\n    var _a = useState(initialSearch),\n        inputValue = _a[0],\n        setValue = _a[1];\n\n    var debouncedUpdate = useCallback(debounce(updateValue, debounceTime), [debounceTime]);\n    useEffect(function () {\n      var unsubscribe = store.on(function (_a) {\n        var v = _a.v,\n            t = _a.t;\n\n        if (t === EventType.External) {\n          setValue(v);\n        }\n      });\n      return unsubscribe;\n    }, []);\n    useEffect(function () {\n      updateValue(initialSearch, onChange);\n    }, [initialSearch, onChange]);\n\n    var handleChange = function (_a) {\n      var value = _a.target.value;\n      setValue(value);\n\n      if (debounceTime) {\n        debouncedUpdate(value, onChange);\n      } else {\n        updateValue(value, onChange);\n      }\n    };\n\n    return React.createElement(\"input\", __assign({\n      className: props.classPrefix + \"__input\",\n      onChange: handleChange,\n      value: inputValue\n    }, props.inputProps));\n  };\n\n  Input.displayName = \"InputFilter\";\n  Input.defaultProps = defaultProps;\n  return Input;\n}\n\nfunction fuzzyFilterFactory() {\n  var store = behaviorStore({\n    t: EventType.Initial,\n    v: \"\"\n  });\n  return {\n    FilterResults: filterResultsFactory(store),\n    InputFilter: inputFilterFactory(store),\n    changeInputValue: function (value) {\n      store({\n        t: EventType.External,\n        v: typeof value !== \"string\" ? \"\" : value\n      });\n    }\n  };\n}\n\nexport default fuzzyFilterFactory;","map":{"version":3,"sources":["../src/FilterResults.tsx","../src/InputFilter.tsx","../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qBAuDe,GAAA,KAAA,CAAA,EAAA,CAAY,UAAA,EAAA,EAAM;;;OAAlB,C;;;;;wBASO,K;;;;wCAElB,E;;;;;;;;;;AAHF,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBCrCyD,C;YAGjD,EAAA,E;YACA,UAAA,KAAA,EAAA;;;;;mCAIoD;;QAExD,aAAA,GAAA,QAAA,CAAA,KAAA,C;;;;;;;;;;;;;;QAYW,QAAA,GAAA,EAAA,CAAA,CAAA,C;;uBACI,GAAA,WAAA,CAAA,QAAA,CAAA,WAAA,EAAA,YAAA,CAAA,EAAA,CAAA,YAAA,CAAA,C;;6BAOE,CAAC,E,CAAA,UAAA,EAAA,EAAA;;;;aACjB,KAAA,SAAA,CAAA,Q,EAAA;;;;;;AAeL,IAAA,SAAA,CAAA,YAAA;;KAAA,E,gBAAA,Q,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;2BChDmC,CAAA;wBAAA;;AAAA,GAAA,C","sourcesContent":["import Fuse, { FuseOptions } from \"fuse.js\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Emitter, Event } from \"./behaviorStore\";\n\nexport type PreFilterHandler<T> = (\n  match: string,\n  items: T[],\n  fuse: typeof Fuse\n) => T[];\n\nexport interface PreFilter<T> {\n  regex: RegExp;\n  handler: PreFilterHandler<T>;\n}\nexport interface FilterResultsProps<T> {\n  children: (items: T[]) => React.ReactNode;\n  items: T[];\n  defaultAllItems?: boolean;\n  fuseConfig: FuseOptions<T>;\n  prefilters?: Array<PreFilter<T>>;\n}\n\nexport type FilterResults<T> = React.FunctionComponent<FilterResultsProps<T>>;\n\nexport default function filterResultsFactory<T>(\n  store: Emitter<Event>\n): FilterResults<T> {\n  const Results: FilterResults<T> = (props: FilterResultsProps<T>) => {\n    const [searchVal, setSearch] = useState(\"\");\n\n    useEffect(() => {\n      const unsubscribe = store.on(({ v }) => {\n        setSearch(v);\n      });\n      return unsubscribe;\n    }, []);\n\n    const prefilterItems = (s: string): { items: T[]; search: string } => {\n      let items = props.items;\n      (props.prefilters || []).forEach(({ regex, handler }) => {\n        const matches = s.match(regex) || [];\n        s = s.replace(regex, \"\").trim();\n        matches.forEach(match => {\n          items = handler(match, items, Fuse);\n        });\n      });\n      return { items, search: s };\n    };\n\n    const filterItems = (s: string): T[] => {\n      const { items, search } = prefilterItems(s || \"\");\n      if (search.trim() === \"\") {\n        return props.defaultAllItems ? items : [];\n      } else {\n        const fuse = new Fuse(items, props.fuseConfig);\n        return fuse.search(search);\n      }\n    };\n\n    const filteredItems = filterItems(searchVal);\n    // wrap with Fragment to fix type issue\n    return <Fragment>{props.children(filteredItems)}</Fragment>;\n  };\n  Results.displayName = \"FilterResults\";\n  Results.defaultProps = {\n    defaultAllItems: true,\n    prefilters: [],\n  };\n\n  return Results;\n}\n","import debounce from \"debounce\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Emitter, Event, EventType } from \"./behaviorStore\";\n\nexport interface InputFilterProps {\n  classPrefix?: string;\n  initialSearch?: string;\n  inputProps?: React.InputHTMLAttributes<HTMLInputElement>;\n  onChange?: (value: string) => string;\n  debounceTime?: number;\n}\n\nexport type InputFilter = React.ComponentType<InputFilterProps>;\nconst defaultProps = {\n  classPrefix: \"react-fuzzy-filter\",\n  debounceTime: 0,\n  inputProps: {},\n  onChange: (value: string) => value,\n};\n\nexport default function inputFilterFactory(store: Emitter<Event>): InputFilter {\n  function updateValue(value: string, onChange: (value: string) => string) {\n    const overrideValue = onChange(value);\n    store({ t: EventType.Input, v: overrideValue });\n  }\n\n  const Input: React.FunctionComponent<InputFilterProps> = (\n    props: InputFilterProps\n  ) => {\n    const initialSearch = props.initialSearch || \"\";\n    const onChange = props.onChange || defaultProps.onChange;\n    const debounceTime = props.debounceTime || defaultProps.debounceTime;\n\n    const [inputValue, setValue] = useState(initialSearch);\n    const debouncedUpdate = useCallback(debounce(updateValue, debounceTime), [\n      debounceTime,\n    ]);\n\n    useEffect(() => {\n      const unsubscribe = store.on(({ v, t }) => {\n        if (t === EventType.External) {\n          setValue(v);\n        }\n      });\n      return unsubscribe;\n    }, []);\n\n    useEffect(() => {\n      updateValue(initialSearch, onChange);\n    }, [initialSearch, onChange]);\n\n    const handleChange = ({\n      target: { value },\n    }: React.ChangeEvent<HTMLInputElement>) => {\n      setValue(value);\n      if (debounceTime) {\n        debouncedUpdate(value, onChange);\n      } else {\n        updateValue(value, onChange);\n      }\n    };\n\n    return (\n      <input\n        className={`${props.classPrefix}__input`}\n        onChange={handleChange}\n        value={inputValue}\n        {...props.inputProps}\n      />\n    );\n  };\n\n  Input.displayName = \"InputFilter\";\n  Input.defaultProps = defaultProps;\n\n  return Input;\n}\n","import behaviorStore, { Emitter, Event, EventType } from \"./behaviorStore\";\nimport filterResultsFactory from \"./FilterResults\";\nimport inputFilterFactory from \"./InputFilter\";\n\nexport {\n  FilterResults,\n  FilterResultsProps,\n  PreFilter,\n  PreFilterHandler,\n} from \"./FilterResults\";\nexport { FuseOptions, FuseResult } from \"fuse.js\";\nexport { InputFilter, InputFilterProps } from \"./InputFilter\";\n\nexport default function fuzzyFilterFactory<T>() {\n  const store: Emitter<Event> = behaviorStore<Event>({\n    t: EventType.Initial,\n    v: \"\",\n  });\n  return {\n    FilterResults: filterResultsFactory<T>(store),\n    InputFilter: inputFilterFactory(store),\n    changeInputValue: (value: string) => {\n      store({\n        t: EventType.External,\n        v: typeof value !== \"string\" ? \"\" : value,\n      });\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}